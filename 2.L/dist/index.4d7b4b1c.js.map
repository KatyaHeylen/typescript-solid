{"mappings":"","sources":["2.L/old.js"],"sourcesContent":["// //This is called a Union, the discountType can only contain the following 2 values:\r\n// type discountType = \"variable\" | \"fixed\" | \"none\";\r\n//\r\n// class Discount {\r\n//     private _type: discountType;\r\n//     private _value: number;\r\n//\r\n//     constructor(type : discountType, value : number = 0) {\r\n//         this._type = type;\r\n//         this._value = value;\r\n//\r\n//         if(this._type != 'none' && value <= 0) {\r\n//             throw new Error('You cannot create a '+ this._type + ' discount with a negative value');\r\n//         }\r\n//     }\r\n//\r\n//     apply(price : number) : number {\r\n//         //@todo: instead of using magic values as string in this, it would be a lot better to change them into constant. This would protect us from misspellings. Can you improve this?\r\n//         if(this._type === \"none\")  {\r\n//             return price;\r\n//         }\r\n//         else if(this._type === \"variable\")  {\r\n//             return (price - (price * this._value / 100));\r\n//         } else if(this._type === \"fixed\") {\r\n//             return Math.max(0, price - this._value);\r\n//         }\r\n//         else {\r\n//             throw new Error('Invalid type of discount');\r\n//         }\r\n//     }\r\n//\r\n//     showCalculation(price : number) : string {\r\n//         if(this._type === \"none\")  {\r\n//             return \"No discount\";\r\n//         }\r\n//         else if(this._type === \"variable\")  {\r\n//             return price + \" € -  \"+ this._value +\"%\";\r\n//         } else if(this._type === \"fixed\") {\r\n//             return price + \"€ -  \"+ this._value +\"€ (min 0 €)\";\r\n//         }\r\n//         else {\r\n//             throw new Error('Invalid type of discount');\r\n//         }\r\n//     }\r\n// }\r\n//\r\n// class Product {\r\n//     private _name : string;\r\n//     private _price : number;\r\n//     private _discount : Discount;\r\n//\r\n//     constructor(name: string, price: number, discount: Discount) {\r\n//         this._name = name;\r\n//         this._price = price;\r\n//         this._discount = discount;\r\n//     }\r\n//\r\n//     get name(): string {\r\n//         return this._name;\r\n//     }\r\n//\r\n//     get discount(): Discount {\r\n//         return this._discount;\r\n//     }\r\n//\r\n//     get originalPrice(): number {\r\n//         return this._price;\r\n//     }\r\n//\r\n//     //The reason we call this function \"calculateX\" instead of using a getter on Price is because names communicate a lot of meaning between programmers.\r\n//     //most programmers would assume a getPrice() would be a simple display of a property that is already calculated, but in fact this function does a (more expensive) operation to calculate on the fly.\r\n//     calculatePrice() : number {\r\n//         return this._discount.apply(this._price);\r\n//     }\r\n//\r\n//     showCalculation() : string {\r\n//         return this._discount.showCalculation(this._price);\r\n//     }\r\n// }\r\n//\r\n// class shoppingBasket {\r\n//     //this array only accepts Product objects, nothing else\r\n//     private _products: Product[] = [];\r\n//\r\n//     get products(): Product[] {\r\n//         return this._products;\r\n//     }\r\n//\r\n//     addProduct(product: Product) {\r\n//         this._products.push(product);\r\n//     }\r\n// }\r\n//\r\n// let cart = new shoppingBasket();\r\n// cart.addProduct(new Product('Chair', 25, new Discount(\"fixed\", 10)));\r\n// //cart.addProduct(new Product('Chair', 25, new Discount(\"fixed\", -10)));\r\n// cart.addProduct(new Product('Table', 50, new Discount(\"variable\", 25)));\r\n// cart.addProduct(new Product('Bed', 100, new Discount(\"none\")));\r\n//\r\n// const tableElement = document.querySelector('#cart tbody');\r\n// cart.products.forEach((product) => {\r\n//     let tr = document.createElement('tr');\r\n//\r\n//     let td = document.createElement('td');\r\n//     td.innerText = product.name;\r\n//     tr.appendChild(td);\r\n//\r\n//     td = document.createElement('td');\r\n//     td.innerText = product.originalPrice.toFixed(2) + \" €\";\r\n//     tr.appendChild(td);\r\n//\r\n//     td = document.createElement('td');\r\n//     td.innerText = product.calculatePrice().toFixed(2) + \" €\";\r\n//     tr.appendChild(td);\r\n//\r\n//     td = document.createElement('td');\r\n//     td.innerText = product.showCalculation();\r\n//     tr.appendChild(td);\r\n//\r\n//     tableElement.appendChild(tr);\r\n// });\r\n"],"names":[],"version":3,"file":"index.4d7b4b1c.js.map","sourceRoot":"/__parcel_source_root/"}